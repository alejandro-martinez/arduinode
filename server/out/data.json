{
    "project": {},
    "files": {
        "Arduinode.js": {
            "name": "Arduinode.js",
            "modules": {
                "Arduinode": 1
            },
            "classes": {
                "Arduinode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "DataStore.js": {
            "name": "DataStore.js",
            "modules": {
                "DataStore": 1
            },
            "classes": {
                "DataStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Main.js": {
            "name": "Main.js",
            "modules": {
                "Main": 1
            },
            "classes": {
                "Dispositivo": 1,
                "Salida": 1,
                "Luz": 1,
                "Persiana": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "programadorTareas.js": {
            "name": "programadorTareas.js",
            "modules": {
                "Programador de Tareas": 1
            },
            "classes": {
                "Tarea": 1,
                "Programador": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Arduinode": {
            "name": "Arduinode",
            "submodules": {},
            "elements": {},
            "classes": {
                "Arduinode": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Arduinode.js",
            "line": 16,
            "description": "Módulo con clase Principal de la aplicación\nInteractua con Dispositivo y Socket, a través de una clase Facade (Arduinode)"
        },
        "DataStore": {
            "name": "DataStore",
            "submodules": {},
            "elements": {},
            "classes": {
                "DataStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "DataStore.js",
            "line": 12,
            "description": "Módulo para el almacenamiento en memoria, y archivos JSON,\nde los modelos de la aplicación.\nLista de dispositivos y salidas asociadas.\nLista de tareas programadas."
        },
        "Main": {
            "name": "Main",
            "submodules": {},
            "elements": {},
            "classes": {
                "Dispositivo": 1,
                "Salida": 1,
                "Luz": 1,
                "Persiana": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Main.js",
            "line": 277,
            "description": "Modulo con clases Dispositivo y Salida"
        },
        "Programador de Tareas": {
            "name": "Programador de Tareas",
            "submodules": {},
            "elements": {},
            "classes": {
                "Tarea": 1,
                "Programador": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "programadorTareas.js",
            "line": 149,
            "description": "Módulo para la programacion y ejecucion de tareas sobre los dispositivos"
        }
    },
    "classes": {
        "Arduinode": {
            "name": "Arduinode",
            "shortname": "Arduinode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Arduinode",
            "namespace": "",
            "file": "Arduinode.js",
            "line": 16,
            "description": "Clase (Singleton, Facade) principal de la aplicación\n- Interactua con Dispositivo y Socket;\n- Mantiene un listado de dispositivos activos",
            "is_constructor": 1
        },
        "DataStore": {
            "name": "DataStore",
            "shortname": "DataStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataStore",
            "namespace": "",
            "file": "DataStore.js",
            "line": 12,
            "description": "Clase (singleton) para trabajar con archivos JSON\ny almacenar los modelos de la aplicación",
            "is_constructor": 1
        },
        "Dispositivo": {
            "name": "Dispositivo",
            "shortname": "Dispositivo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Main",
            "namespace": "",
            "file": "Main.js",
            "line": 13,
            "description": "Representa un Dispositivo Arduino. Permite:\n1) accionar las salidas que posee, (Luces, Bombas, Persianas);\n2) Consultar lista de salidas y sus estados",
            "is_constructor": 1
        },
        "Salida": {
            "name": "Salida",
            "shortname": "Salida",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Main",
            "namespace": "",
            "file": "Main.js",
            "line": 162,
            "description": "Representa una Salida de un Dispositivo",
            "is_constructor": 1
        },
        "Luz": {
            "name": "Luz",
            "shortname": "Luz",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Main",
            "namespace": "",
            "file": "Main.js",
            "line": 244,
            "description": "Representa una Salida tipo Luz",
            "is_constructor": 1,
            "params": [
                {
                    "name": "nro_salida",
                    "description": "Numero de Salida",
                    "type": "Integer"
                },
                {
                    "name": "_note",
                    "description": "Descripción de Salida",
                    "type": "String"
                }
            ]
        },
        "Persiana": {
            "name": "Persiana",
            "shortname": "Persiana",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Main",
            "namespace": "",
            "file": "Main.js",
            "line": 277,
            "description": "Representa una Salida tipo Persiana",
            "is_constructor": 1
        },
        "Tarea": {
            "name": "Tarea",
            "shortname": "Tarea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Programador de Tareas",
            "namespace": "",
            "file": "programadorTareas.js",
            "line": 11,
            "description": "Representa una Tarea (comando programado)\nLas tareas son comandos programados para enviar a los dispositivos Arduino.\nEj; Encender una Luz en un día y horario determinados, con recurrencia opcional;",
            "is_constructor": 1
        },
        "Programador": {
            "name": "Programador",
            "shortname": "Programador",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Programador de Tareas",
            "namespace": "",
            "file": "programadorTareas.js",
            "line": 149,
            "description": "Clase (Singleton) para ABM de tareas.\nEl modulo schedule permite programar las tareas;\nPermite:\n\t\t1) Crear, eliminar, modificar y reprogramar tareas;\n\t\t2) Observar ejecucion de tareas:\n\t\t\tSe relanzan cada x tiempo, (definido en tiempoEscaneoTareas)\n\t\t\tsi se corta el servicio;",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "Arduinode.js",
            "line": 25,
            "description": "Instancia de modulo net, para recibir datos de Dispositivos Arduino reales",
            "itemtype": "property",
            "name": "socketTCP",
            "type": "net Object (socket)",
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 30,
            "description": "Lista de dispositivos Arduino registrados",
            "itemtype": "property",
            "name": "dispositivos",
            "type": "JSON Object",
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 37,
            "description": "Registra un socket para escuchar eventos de los dispositivos Arduino reales.\nEmite un broadcast a todos los dispositivos conectados a la aplicacion,\ncuando se produce un evento,",
            "itemtype": "method",
            "name": "listenSwitchEvents",
            "params": [
                {
                    "name": "conf",
                    "description": "Configuracion para el socket (IP, puerto)"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 70,
            "description": "Devuelve lista de dispositivos Arduino registrados",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "conf",
                    "description": "Configuracion para el socket (IP, puerto)"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 79,
            "description": "Devuelve dispositivo filtrado por IP",
            "itemtype": "method",
            "name": "getByIP",
            "params": [
                {
                    "name": "ip",
                    "description": "IP del dispositivo a buscar"
                }
            ],
            "return": {
                "description": "Dispositivo"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 88,
            "description": "Ejecuta un comando sobre una salida de un Dispositivo",
            "itemtype": "method",
            "name": "accionar",
            "params": [
                {
                    "name": "params",
                    "description": "Objeto JSON con las claves: IP del dispositivo, numero de salida, accion y temporización"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 101,
            "description": "Devuelve las salidas de un Dispositivo Arduino",
            "itemtype": "method",
            "name": "getSalidas",
            "params": [
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn"
                },
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 115,
            "description": "Devuelve listado de salidas de un Dispositivo, filtradas por estado = 0 (Encendidas)",
            "itemtype": "method",
            "name": "getSalidasEncendidas",
            "params": [
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn"
                },
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "Arduinode.js",
            "line": 181,
            "description": "Registra dispositivos cargados en el modelo (dispositivos.json), en DataStore.dispositivos\ny en atributo lista de esta clase",
            "itemtype": "method",
            "name": "load",
            "class": "Arduinode",
            "module": "Arduinode"
        },
        {
            "file": "DataStore.js",
            "line": 20,
            "description": "Listado de dispositivos Arduino registrados",
            "itemtype": "property",
            "name": "dispositivos",
            "type": "Array",
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "DataStore.js",
            "line": 25,
            "description": "Listado de tareas programadas registradas",
            "itemtype": "property",
            "name": "tareas",
            "type": "Array",
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "DataStore.js",
            "line": 30,
            "description": "Listado de tareas cargadas en scheduler (listas para ejecución)",
            "itemtype": "property",
            "name": "tareasActivas",
            "type": "Array",
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "DataStore.js",
            "line": 62,
            "description": "Método para actualizar un modelo",
            "itemtype": "method",
            "name": "saveModel",
            "params": [
                {
                    "name": "fileName",
                    "description": "Nombre del archivo JSON",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "Datos del nuevo o modificado modelo",
                    "type": "JSON"
                },
                {
                    "name": "key",
                    "description": "Clave por la cual filtrar el modelo a modificar",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function de retorno",
                    "type": "Function"
                }
            ],
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "DataStore.js",
            "line": 87,
            "description": "Método para escribir en el archivo JSON",
            "itemtype": "method",
            "name": "updateFile",
            "params": [
                {
                    "name": "file",
                    "description": "Nombre del modelo",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function de retorno",
                    "type": "Function"
                }
            ],
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "DataStore.js",
            "line": 99,
            "description": "Método para escribir en el archivo JSON",
            "itemtype": "method",
            "name": "deleteModel",
            "params": [
                {
                    "name": "fileName",
                    "description": "Nombre del archivo JSON",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filtro para encontrar el modelo a eliminar",
                    "type": "JSON"
                },
                {
                    "name": "callback",
                    "description": "Function de retorno",
                    "type": "Function"
                }
            ],
            "class": "DataStore",
            "module": "DataStore"
        },
        {
            "file": "Main.js",
            "line": 21,
            "description": "Dirección IP del dispositivo",
            "itemtype": "property",
            "name": "ip",
            "type": "String",
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 26,
            "description": "Descripción del dispositivo",
            "itemtype": "property",
            "name": "note",
            "type": "String",
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 31,
            "description": "Lista de salidas (instancias de Salida) del dispositivo",
            "itemtype": "property",
            "name": "salidas",
            "type": "Array",
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 44,
            "description": "Devuelve una salida por Numero.",
            "itemtype": "method",
            "name": "getSalidaByNro",
            "return": {
                "description": "Salida"
            },
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 54,
            "description": "Ejecuta un comando sobre una salida de un dispositivo.",
            "itemtype": "method",
            "name": "accionarSalida",
            "params": [
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo, numero de salida, y comando"
                },
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn"
                }
            ],
            "return": {
                "description": "Boolean Resultado del comando"
            },
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 70,
            "description": "Parsea los datos recibidos desde los dispositivos Arduino",
            "itemtype": "method",
            "name": "parseSalida",
            "params": [
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo, numero de salida, y comando"
                },
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn"
                }
            ],
            "return": {
                "description": "Boolean Resultado del comando"
            },
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 114,
            "description": "Devuelve listado de salidas de un Dispositivo filtradas por Estado",
            "itemtype": "method",
            "name": "getSalidasByEstado",
            "params": [
                {
                    "name": "_estado",
                    "description": "Estado (0 o 1)"
                },
                {
                    "name": "_array",
                    "description": "Listado de salidas"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 124,
            "description": "Devuelve listado de salidas de un Dispositivo filtradas por Ip",
            "itemtype": "method",
            "name": "getSalidas",
            "params": [
                {
                    "name": "params",
                    "description": "JSON con clave: IP del Dispositivo"
                },
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operación"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 138,
            "description": "Almacena listado de salidas en la instancia de un Dispositivo",
            "itemtype": "method",
            "name": "setSalidas",
            "params": [
                {
                    "name": "_salidas",
                    "description": "listado de salidas del Dispositivo",
                    "type": "JSON Array"
                }
            ],
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 153,
            "description": "Carga lista de dispositivos en memoria",
            "itemtype": "method",
            "name": "load",
            "class": "Dispositivo",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 168,
            "description": "Numero de salida",
            "itemtype": "property",
            "name": "nro_salida",
            "type": "Integer",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 173,
            "description": "Descripción de la salida",
            "itemtype": "property",
            "name": "note",
            "type": "String",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 178,
            "description": "Tipo de Salida ( P o L)\nDispositivo real asociado a la salida (Luz, persiana, Bomba)\n*Bomba se trata como Luz",
            "itemtype": "property",
            "name": "tipo",
            "type": "String",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 185,
            "description": "(Opcional) Temporizacion en minutos para activar una salida\nSe envia al socket como parte del comando. Solo es valida con salidas Tipo L\nEl dispositivo Arduino real, apaga la salida una vez agotado el tiempo de temporizada",
            "itemtype": "property",
            "name": "temporizada",
            "type": "Integer",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 192,
            "description": "Accion a ejecutar sobre la salida\nSe envia al socket como parte inicial del atributo comando.\nSi la salida es tipo L: accion puede tomar los valores:\n--> S para consultar el estado de la salida\n--> T para encender o apagar la salida",
            "itemtype": "property",
            "name": "accion",
            "type": "Integer",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 201,
            "description": "Estado actual de la salida (ON / OFF)\nSolo es valida con salidas tipo L\n[0, 1] Donde 0 significa ON (encendida), 1 (OFF)",
            "itemtype": "property",
            "name": "estado",
            "type": "Integer",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 208,
            "description": "Comando a ejecutar sobre la salida\nSe envia al socket y tiene la siguiente sintaxis:\nACCION + NUMERO DE SALIDA + ESTADO ( + . TEMPORIZADA)\nEjemplo: Encender la salida numero 24 \t -> T240\nEjemplo: Encender la salida durante 1 hora -> T240.60",
            "itemtype": "property",
            "name": "comando",
            "type": "Integer",
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 228,
            "description": "Metodo switch para sobrecarga. Cada Tipo de Salida lo implementa distinto.\nInteractua con el socket enviandole un comando",
            "itemtype": "method",
            "name": "switch",
            "params": [
                {
                    "name": "params",
                    "description": "Parametros para el socket, IP dispositivo, Comando, Numero de salida",
                    "type": "JSON Array"
                },
                {
                    "name": "callback",
                    "description": "Function de retorno con resultado del comando enviado al Socket",
                    "type": "Function"
                }
            ],
            "class": "Salida",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 258,
            "description": "Implementación de switch para Luz",
            "itemtype": "method",
            "name": "switch",
            "params": [
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo, numero de salida, y comando"
                },
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn"
                }
            ],
            "class": "Luz",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 288,
            "description": "Implementación de switch para Persiana. Utiliza la accion P",
            "itemtype": "method",
            "name": "switch",
            "params": [
                {
                    "name": "params",
                    "description": "Objeto JSON con la clave IP del dispositivo, numero de salida, y comando"
                },
                {
                    "name": "callback",
                    "description": "Funcion callback que se ejecuta cuando se completa la operaciòn\n\nUso: P + Nro de Salida + Accion (0,1,2)\n\t   \t0 --> Sube la Persiana\n\t\t1 --> Baja\n\t\t2 --> Detiene\n\t\tEjemplo: P251 --> Baja la persiana cuya salida es 25"
                }
            ],
            "class": "Persiana",
            "module": "Main"
        },
        {
            "file": "Main.js",
            "line": 308,
            "description": "Factory para crear los distintos tipos de Salida",
            "itemtype": "method",
            "name": "SalidaFactory",
            "return": {
                "description": "Objeto Salida segun atributo tipo",
                "type": "Salida"
            },
            "class": "Persiana",
            "module": "Main"
        },
        {
            "file": "programadorTareas.js",
            "line": 29,
            "description": "Tiempo en minutos, durante el cual se ejecuta la tarea",
            "itemtype": "property",
            "name": "temporizada",
            "type": "String",
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 34,
            "description": "Lista de dispositivos Arduino sobre la cual se ejecutan los comandos",
            "itemtype": "property",
            "name": "dispositivos",
            "type": "Array",
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 52,
            "description": "Ejecuta una tarea.\nItera el array de dispositivos de la tarea,\nextrayendo IP del dispositivo y numero de salida a Accionar",
            "itemtype": "method",
            "name": "ejecutar",
            "return": {
                "description": "callback (Opcional)"
            },
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 81,
            "description": "Setea reglas de ejecucion para la tarea que se envia al scheduler.\nLos parametros provienen del objeto config de la Clase Tarea\nParametros: Dia de ejecucion, hora, minuto, segundo",
            "itemtype": "method",
            "name": "setExecutionRules",
            "return": {
                "description": "rule"
            },
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 100,
            "description": "Retorna el tiempo restante (en minutos) de una tarea, (si existe)\nSe calcula a partir de la hora inicio y la duracion de la tarea",
            "itemtype": "method",
            "name": "getTiempoRestante",
            "return": {
                "description": "Integer"
            },
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 122,
            "description": "Determina si una tarea es valida para su ejecucion\nSe comprueba el atributo activa, fecha, hora y dias de ejecucion",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "Boolean"
            },
            "class": "Tarea",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 161,
            "description": "Parametros de configuración (Tiempo de escaneo de tareas)",
            "itemtype": "property",
            "name": "config",
            "type": "JSON",
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 173,
            "description": "Se lanza al modificar una tarea existente. Quita la tarea del scheduler,\ny la agrega nuevamente con los cambios hechos.",
            "itemtype": "method",
            "name": "reprogramarTarea",
            "params": [
                {
                    "name": "_tarea",
                    "description": "la configuración de la tarea, (se parsea y se crea instancia Tarea)"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 186,
            "description": "Quita una tarea del array de tareasActivas de DataStore",
            "itemtype": "method",
            "name": "quitarTareaEnEjecucion",
            "params": [
                {
                    "name": "tarea",
                    "description": "la tarea a quitar"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 200,
            "description": "Al quitar una tarea, se ejecuta la accion de apagado sobre los\ndispositivos asociados a la misma.",
            "itemtype": "method",
            "name": "quitarTarea",
            "params": [
                {
                    "name": "_tarea",
                    "description": "la configuracion de tarea a quitar. (Se parsea y se crea instancia Tarea)"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 215,
            "description": "Agrega un objeto Tarea al scheduler (modulo schedule).\ndispositivos asociados a la misma.\nRequiere el objeto rule devuelto por tarea.getExecutionRules()\nRegistra la tarea como activa, en DataStore.tareasActivas",
            "itemtype": "method",
            "name": "loadInScheduler",
            "params": [
                {
                    "name": "tarea",
                    "description": "objeto tarea (instancia de Tarea)"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 239,
            "description": "Intenta ejecutar una tarea forzosamente. Comprobando si es valida,\ny el tiempo restante.",
            "itemtype": "method",
            "name": "forzarEjecucion",
            "params": [
                {
                    "name": "tarea",
                    "description": "objeto tarea (instancia de Tarea)"
                }
            ],
            "return": {
                "description": "null"
            },
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 261,
            "description": "Recorre el listado de tareas e intenta forzar la ejecucion de cada una.\nRegistra la tarea como activa, en DataStore.tareasActivas",
            "itemtype": "method",
            "name": "observarCambios",
            "params": [
                {
                    "name": "tiempoEscaneoTareas",
                    "description": "en milisegundos"
                }
            ],
            "class": "Programador",
            "module": "Programador de Tareas"
        },
        {
            "file": "programadorTareas.js",
            "line": 283,
            "description": "Importa listado de tareas desde archivo JSON, a DataStore.tareas\ny las carga en scheduler.",
            "itemtype": "method",
            "name": "loadTareas",
            "class": "Programador",
            "module": "Programador de Tareas"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " Main.js:228"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " Main.js:228"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " Main.js:244"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " Main.js:244"
        }
    ]
}